#!/bin/bash

source ./scripts/utils.sh

## extract a host interface IP address
ips=($(ifconfig | sed -En 's/127.0.0.1//;s/172.//;s/169.//;s/.inet (addr:)?(([0-9]+.){3}[0-9]+).*/\2/p'))
EXT_IP=$ips
if [[ "${#ips[@]}" -gt "1" ]]; then
  select ip in ${ips[*]}; do
    case $ip in
      exit )
        die 0 "exiting ..."
        break
        ;;

      * )
        EXT_IP=$ip
        break
        ;;
    esac
  done
fi

NODE_IMAGE="node:alpine"

function _exec {
  docker run \
         --net=host -ti --rm -v "$(pwd -P)":/cwd -w /cwd \
         $DARGS $NODE_IMAGE "$@"
}

docker swarm init --advertise-addr $EXT_IP > /dev/null

docker network create -d overlay --attachable databox-system-net >/dev/null

err "start core-network..."
docker-compose -f ./docker-core-network.yaml build
docker-compose -f ./docker-core-network.yaml up -d
_exec node ./src/createResolvConf.js "$(docker inspect $(docker ps -q --filter="name=databox-network"))"

err "start container-manager..."
docker stack deploy -c docker-compose.yaml databox >/dev/null 2>&1
assert_or_die $? 0 "Problem with docker stack deploy"

# ip_on_net <container> <network>
function ip_on_net {
  NET_ID=$(docker network inspect ${2} --format "{{.Id}}")
  IP_FORMAT="{{range .NetworkSettings.Networks}}{{if eq \"${NET_ID}\" .NetworkID}}{{.IPAddress}}{{end}}{{end}}"
  docker inspect ${1} --format "${IP_FORMAT}"
}

# install <image> <service>
# return: <container>
function install {
  NET=${2}-core-network
  docker network create -d overlay --internal --attachable ${NET} >/dev/null
  docker network connect ${NET} ${CN}
  docker service create --name ${2} --replicas 1 --endpoint-mode dnsrr \
    --network ${NET} --dns $(ip_on_net ${CN} ${NET}) ${1} sleep 8h >/dev/null 2>&1
}

# uninstall <service>
function uninstall {
  NET=${1}-core-network
  docker service rm ${1} >/dev/null
  docker network disconnect ${NET} ${CN}

  DANGLING=0
  while [ "$DANGLING" == "0" ]; do
    sleep 1s
    docker network rm ${NET} >/dev/null 2>&1
    docker network inspect ${NET} >/dev/null 2>&1
    DANGLING=$?
  done
}

# container <service>
# return <container>
function container {
  NAME=
  while [ -z "$NAME" ]; do
    sleep 1s
    NAME=$(docker ps --filter "name=${1}" --format "{{.Names}}")
  done
  echo ${NAME}
}

CM=$(container "container-manager")
CN=$(container "databox-network")
KEY=$(docker exec ${CM} cat /run/secrets/DATABOX_NETWORK_KEY)

docker exec ${CM} curl -s --retry 2 -o /dev/null -X POST -H "x-api-key: ${KEY}" \
  http://${CN}:8080/privileged -d "{\"src_ip\": \"$(ip_on_net ${CM} databox-system-net)\"}"

err "install app and store..."
install "appropriate/curl:latest" "app"
install "python:2.7-alpine" "store"
APP=$(container "app")
STORE=$(container "store")

STATUS=$(docker exec ${CM} curl -s -w "%{http_code}\\n" --retry 2 -o /dev/null \
  -X POST -H "x-api-key: ${KEY}" \
  http://${CN}:8080/connect -d '{"name":"app", "peers":["store"]}')
test_assert ${STATUS} 200 "Is app and store successfully connected?"

docker cp hello.html ${STORE}:/
docker exec -d ${STORE} python -m SimpleHTTPServer 8080
sleep 5s # for python HTTP server to boot up
RESP=$(docker exec ${APP} curl -s http://store:8080/hello.html)
test_assert "${RESP}" "world" "Does HTTP traffic app<>store get through?"

STATUS=$(docker exec ${CM} curl -s -w "%{http_code}\\n" --retry 2 -o /dev/null \
  -X POST -H "x-api-key: ${KEY}" \
  http://${CN}:8080/connect -d '{"name":"app", "peers":["www.google.com"]}')
test_assert ${STATUS} 200 "Is app and google.com successfully connected?"

sleep 1s
STATUS=$(docker exec ${APP} curl -s -w "%{http_code}\\n" -o /dev/null www.google.com)
CHECK="Does HTTP traffic app<>www.google.com get through?"
if [ ${STATUS} -lt 400 ]; then success "$CHECK"; else fail "$CHECK" ${STATUS}; fi

err "disconnect app and store..."
docker exec ${CM} curl -s --retry 2 -o /dev/null -X POST -H "x-api-key: ${KEY}" \
  http://${CN}:8080/disconnect -d "{\"name\": \"app\", \"ip\":\"$(ip_on_net ${APP} "app-core-network")/24\"}"

docker exec ${APP} curl -s http://store:8080/hello.html
test_assert $? "6" "Fail after disconnection?"

err "remove app and store..."
uninstall "app"
uninstall "store"
err "app, store and related networks are purged..."
RESP=$(docker exec ${CM} curl -s --retry 2 -H "x-api-key: ${KEY}" http://${CN}:8080/status)
test_assert "${RESP}" "active" "Is core-network still alive after networks torn down?"

err "reinstall and reconnect app and store..."
APP=
STORE=
install "appropriate/curl:latest" "app"
install "python:2.7-alpine" "store"
APP=$(container "app")
STORE=$(container "store")

docker exec ${CM} curl -s --retry 2 -o /dev/null \
  -X POST -H "x-api-key: ${KEY}" \
  http://${CN}:8080/connect -d '{"name":"app", "peers":["store"]}'

docker cp hello.html ${STORE}:/
docker exec -d ${STORE} python -m SimpleHTTPServer 8080
sleep 5s # for python HTTP server to boot up
RESP=$(docker exec ${APP} curl -s http://store:8080/hello.html)
test_assert "${RESP}" "world" "Does HTTP traffic get through after reinstallation?"
